class Solution {
public:
   bool dfs(vector<int>adj[],vector<bool>&visited,double &pr,int vertex,vector<double>&prob,int target,int time)
   {
       if(time<0)return false;
       visited[vertex]=true;
       if(vertex==target)
       return true;
       int x=0;
       for(auto it=adj[vertex].begin();it!=adj[vertex].end();it++)
       {
           if(!visited[*it])
           {
              x++;
           }
           else
           continue;
       }
       for(auto it=adj[vertex].begin();it!=adj[vertex].end();it++)
       {
           if(!visited[*it])
           {
      
               double temp=1/(double(x));
               prob[*it]=pr*temp;
              if(dfs(adj,visited,prob[*it],*it,prob,target,time-1))
              return true;
              else
              continue;
           }
       }
       return false;
   }
    double frogPosition(int n, vector<vector<int>>& edges, int t, int target) {
        double pr=1.0;
        vector<int>adj[n+1];
        int m=edges.size();
        for(int i=0;i<m;i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
    
        vector<bool>visited(n+1);
        vector<double>prob(100);
       for(int i=1;i<=n;i++)
       {
            if(dfs(adj,visited,pr,1,prob,target,t))
            {
               return prob[target];
            }
               
       }
       return 0;

    }
};
