class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>subset(n);
        // for(int i=0;i<n;i++)
        // {
        //     subset[i].push_back(nums[i]);
        // }
        int res=0;
        sort(nums.begin(),nums.end());
        int ans=INT_MIN;
        for(int i=n-1;i>=0;i--)
        {
            int Max=0;
            int idx=-1;
            for(int j=i+1;j<n;j++)
            {
                if(nums[i]%nums[j]==0 || nums[j]%nums[i]==0)
                {
                    if(Max<subset[j].size())
                    {
                        Max=subset[j].size();
                        idx=j;
                    }
                }
            }
            if(idx!=-1)
            {
                vector<int>temp(subset[idx].begin(),subset[idx].end());
                temp.push_back(nums[i]);
                subset[i]=temp;
            }
            else
            {
              subset[i].push_back(nums[i]);  
            }
            if(ans<subset[i].size())
            {
                ans=subset[i].size();
                res=i;
            }
        }
        int val=0;
        int i=0;
        for(auto x:subset)
        {
            for(auto y:x)
            {
                cout<<y<<" ";
            }
            cout<<endl;
        }
        for(auto x:subset)
        {
          if(val<x.size())
          {
              val=x.size();
              res=i;
          }
          i++;
        //    cout<<x.size()<<endl;
        }
       
       
        return subset[res];
        
    }
};
